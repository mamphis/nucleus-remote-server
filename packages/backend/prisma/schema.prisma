// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String @id() @default(uuid())
  name       String
  maxClients Int    @default(5)

  client        Client[]
  group         Group[]
  task          Task[]
  configuration Configuration[]
  user          User[]
  notification  Notification[]
  featureFlag   FeatureFlag[]
  history       History[]
}

model Key {
  id        String   @id() @default(uuid())
  publicKey String
  createdAt DateTime @default(now())

  clients Client[]
}

model Client {
  id         String   @id()
  username   String
  os         String
  appVersion String
  hostname   String
  lastPing   DateTime
  active     Boolean  @default(true)

  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  key           Key             @relation(fields: [keyId], references: [id])
  group         Group[]
  clientLog     ClientLog[]
  clientDetail  ClientDetail[]
  installedApps InstalledApps[]
  tenantId      String
  keyId         String
  localDrive    LocalDrive[]
}

model Group {
  id        String  @id() @default(uuid())
  name      String
  isDefault Boolean @default(false)

  client        Client[]
  configuration Configuration[]
  tenant        Tenant?         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId      String?
}

model Configuration {
  id   String @id() @default(uuid())
  name String

  group    Group[]
  task     Task[]
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String?
}

enum OutputOption {
  All
  OnlyError
  Special
}

model Task {
  id      String       @id() @default(uuid())
  name    String
  type    String
  active  Boolean      @default(false)
  runOnce Boolean      @default(false)
  content String       @default("")
  output  OutputOption @default(All)

  configuration   Configuration? @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  configurationId String?
  tenant          Tenant?        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        String?
}

model User {
  id              String @id() @default(uuid())
  username        String @unique
  password        String
  email           String @unique() @default("")
  onetimePassword String @default("")

  tenantId             String
  tenant               Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permission           Permission[]
  approvedNotification Notification[]
}

model Permission {
  scope String @id

  user User[]
}

model ClientLog {
  id        Int      @id @default(autoincrement())
  level     String   @default("info")
  message   String
  timestamp DateTime @default(now())

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String
}

model ClientDetail {
  key      String
  clientId String
  value    String

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@id([key, clientId])
}

enum NotificationSeverity {
  Low
  Medium
  High
  Critical
}

model Notification {
  id         String               @id() @default(uuid())
  severity   NotificationSeverity
  unread     Boolean              @default(true)
  createdAt  DateTime             @default(now())
  message    String
  approvedBy User?                @relation(fields: [approvedByUserId], references: [id])

  tenant           Tenant  @relation(fields: [tenantId], references: [id])
  tenantId         String
  approvedByUserId String?
}

model FeatureFlag {
  id       String
  name     String
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  enabled  Boolean
  tenantId String

  @@id([tenantId, id])
}

model InstalledApps {
  clientId    String
  name        String
  version     String
  registryKey String
  publisher   String
  installDate DateTime
  lastUpdate  DateTime @default(now()) @updatedAt()

  client Client @relation(fields: [clientId], references: [id])

  @@id([clientId, name])
}

model LocalDrive {
  clientId         String
  driveLetter      String
  driveDescription String
  driveType        String
  driveFileSystem  String
  driveSize        BigInt
  driveFreeSpace   BigInt

  client            Client              @relation(fields: [clientId], references: [id])
  localDriveHistory LocalDriveHistory[]

  @@id([clientId, driveLetter])
}

model LocalDriveHistory {
  clientId       String
  timestamp      DateTime @default(now())
  driveLetter    String
  driveSize      BigInt
  driveFreeSpace BigInt

  localDrive LocalDrive @relation(fields: [clientId, driveLetter], references: [clientId, driveLetter])

  @@id([clientId, driveLetter, timestamp])
}

model History {
  id        String   @id() @default(uuid())
  timestamp DateTime @default(now())
  type      String
  data      Int

  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId String
}

model QueryMetrics {
  bucketId    String   @id() @default(uuid())
  bucketTime  DateTime @default(now())
  query       String
  hitCount    Int
  avgDuration Int
  maxDuration Int
}

model RequestMetrics {
  bucketId    String   @id() @default(uuid())
  bucketTime  DateTime @default(now())
  requestPath String
  hitCount    Int
  avgDuration Int
  maxDuration Int
}

model StatusCodeMetrics {
  bucketId    String   @id() @default(uuid())
  bucketTime  DateTime @default(now())
  statusCode  Int
  hitCount    Int
  avgDuration Int
  maxDuration Int
}
